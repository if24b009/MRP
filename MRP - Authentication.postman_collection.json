{
	"info": {
		"_postman_id": "1aa06aa4-7114-4ad2-a1d9-e1e56a8c5c9d",
		"name": "MRP - Authentication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "48874562",
		"_collection_link": "https://if24b009-7017893.postman.co/workspace/L's-Workspace~ce232350-0779-47bb-88d9-5cf028d4942d/collection/48874562-1aa06aa4-7114-4ad2-a1d9-e1e56a8c5c9d?action=share&source=collection_link&creator=48874562"
	},
	"item": [
		{
			"name": "Login - correct credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Status code is 201",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// 2. Response body is valid JSON",
							"pm.test(\"Response body is valid JSON\", function () {",
							"    pm.expect(function () {",
							"        pm.response.json();",
							"    }).to.not.throw();",
							"});",
							"",
							"// 3. Response contains 'message' key with correct value",
							"pm.test(\"Response contains 'message' key with value 'User logged in successfully'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message', 'User logged in successfully');",
							"});",
							"",
							"// 4. Response contains 'token' key",
							"pm.test(\"Response contains 'token' key\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('token');",
							"});",
							"",
							"// 5. Token is a non-empty string and contains dashes (basic UUID check)",
							"pm.test(\"Token is a non-empty string and contains dashes (basic UUID check)\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.token).to.be.a('string').and.not.empty;",
							"    pm.expect(jsonData.token).to.include('-');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"Max\",\r\n    \"password\": \"1234ABcsg!!_\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - wrong credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Validate response status code is 400",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// 2. Validate response body is valid JSON",
							"pm.test(\"Response body is valid JSON\", function () {",
							"    pm.expect(function () {",
							"        pm.response.json();",
							"    }).to.not.throw();",
							"});",
							"",
							"// 3. Validate response contains 'error' key with value 'Invalid username or password'",
							"pm.test(\"Response contains 'error' key with correct value\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error', 'Invalid username or password');",
							"});",
							"",
							"// 4. Validate response does NOT contain a 'token' key",
							"pm.test(\"Response does NOT contain 'token' key\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.have.property('token');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"Sabine\",\r\n    \"password\": \"TestTest123!!_\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:8000/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - missing username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Validate response status code is 400",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// 2. Validate response body is valid JSON",
							"pm.test(\"Response body is valid JSON\", function () {",
							"    pm.expect(function () {",
							"        pm.response.json();",
							"    }).to.not.throw();",
							"});",
							"",
							"// 3. Validate response contains an 'error' key with value 'Username needs to be entered'",
							"pm.test(\"Response contains 'error' key with correct value\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error', 'Username needs to be entered');",
							"});",
							"",
							"// 4. Validate response does NOT contain a 'token' key",
							"pm.test(\"Response does NOT contain 'token' key\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.have.property('token');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"\",\r\n    \"password\": \"TestTest123!!_\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:8000/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - missing password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Validate response status code is 400",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// 2. Validate response body is valid JSON",
							"pm.test(\"Response body is valid JSON\", function () {",
							"    pm.expect(function () {",
							"        JSON.parse(pm.response.text());",
							"    }).to.not.throw();",
							"});",
							"",
							"// 3. Validate response contains 'error' key with correct value",
							"pm.test(\"Response contains 'error' key with correct value\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error', 'Password needs to be entered');",
							"});",
							"",
							"// 4. Validate response does NOT contain a 'token' key",
							"pm.test(\"Response does NOT contain 'token' key\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.have.property('token');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"Max\",\r\n    \"password\": \"\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:8000/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - missing credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test: Status code should be 400 for missing credentials",
							"pm.test(\"Status code is 400 for missing credentials\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Test: Error message should mention missing username or credentials",
							"pm.test(\"Error message indicates missing username or credentials\", function () {",
							"    var jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {}",
							"    pm.expect(jsonData).to.have.property(\"error\");",
							"    pm.expect(jsonData.error.toLowerCase()).to.satisfy(function(msg) {",
							"        return msg.includes(\"username\") || msg.includes(\"credential\");",
							"    });",
							"});",
							"",
							"// Test: Error message must exactly match \"Username needs to be entered\"",
							"pm.test(\"Error message is exactly 'Username needs to be entered'\", function () {",
							"    var jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {}",
							"    pm.expect(jsonData).to.have.property(\"error\");",
							"    pm.expect(jsonData.error).to.eql(\"Username needs to be entered\");",
							"});",
							"",
							"// Test: No token should be present in response body",
							"pm.test(\"No token present in response body\", function () {",
							"    var jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {}",
							"    pm.expect(jsonData).to.not.have.property(\"token\");",
							"});",
							"",
							"// Test: No token present in response headers",
							"pm.test(\"No token present in response headers\", function () {",
							"    var tokenHeader = pm.response.headers.get(\"token\") || pm.response.headers.get(\"authorization\");",
							"    pm.expect(tokenHeader).to.be.undefined;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"\",\r\n    \"password\": \"\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:8000/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - wrong password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response body is valid JSON\", function () {",
							"    pm.expect(function () {",
							"        pm.response.json();",
							"    }).to.not.throw();",
							"});",
							"",
							"pm.test(\"Response contains 'error' key with value 'Invalid password'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error', 'Invalid password');",
							"});",
							"",
							"pm.test(\"Response does NOT contain 'token' key when password is invalid\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.have.property('token');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"Max\",\r\n    \"password\": \"TestTest123!!_\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:8000/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - new user (valid)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test: Status code should be 201 for successful registration",
							"pm.test(\"Status code is 201 for successful registration\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// Test: Response body should contain a success message or user info",
							"pm.test(\"Response body contains success message or user info\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response is not valid JSON\");",
							"    }",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"    pm.expect(Object.keys(jsonData).length).to.be.above(0);",
							"});",
							"",
							"// Test: Response should not contain an error property",
							"pm.test(\"No error property in response body\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {}",
							"    pm.expect(jsonData).to.not.have.property(\"error\");",
							"});",
							"",
							"// Test: Token or user id should be present in response (if applicable)",
							"pm.test(\"Token or user id present in response (if applicable)\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {}",
							"    pm.expect(",
							"        jsonData.hasOwnProperty(\"token\") ||",
							"        jsonData.hasOwnProperty(\"user\") ||",
							"        jsonData.hasOwnProperty(\"id\")",
							"    ).to.be.true;",
							"});",
							"",
							"// Test: Response contains id, message, and username properties",
							"pm.test(\"Response contains id, message, and username\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response is not valid JSON\");",
							"    }",
							"    pm.expect(jsonData).to.have.property(\"id\");",
							"    pm.expect(jsonData).to.have.property(\"message\");",
							"    pm.expect(jsonData).to.have.property(\"username\");",
							"});",
							"",
							"// Test: Message is exactly 'User registered successfully'",
							"pm.test(\"Message is exactly 'User registered successfully'\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response is not valid JSON\");",
							"    }",
							"    pm.expect(jsonData).to.have.property(\"message\");",
							"    pm.expect(jsonData.message).to.eql(\"User registered successfully\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"user{{$timestamp}}\",\r\n    \"password\": \"1234xxC4ABcsg!!_\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - invalid JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test: Status code should be 400, 422, or 500 for invalid JSON",
							"pm.test(\"Status code is 400, 422, or 500 for invalid JSON\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400, 422, 500]);",
							"});",
							"",
							"// Test: Response body should contain an error property",
							"pm.test(\"Response body contains error property\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response is not valid JSON\");",
							"    }",
							"    pm.expect(jsonData).to.have.property(\"error\");",
							"});",
							"",
							"// Test: Error message must exactly match \"Invalid JSON format\"",
							"pm.test(\"Error message is exactly 'Invalid JSON format'\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response is not valid JSON\");",
							"    }",
							"    pm.expect(jsonData.error).to.eql(\"Invalid JSON format\");",
							"});",
							"",
							"// Test: Error message should mention invalid JSON or parse error",
							"pm.test(\"Error message indicates invalid JSON or parse error\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response is not valid JSON\");",
							"    }",
							"    pm.expect(jsonData.error.toLowerCase()).to.satisfy(function(msg) {",
							"        return msg.includes(\"json\") || msg.includes(\"parse\") || msg.includes(\"syntax\") || msg.includes(\"invalid\");",
							"    });",
							"});",
							"",
							"// Test: No token should be present in response body",
							"pm.test(\"No token present in response body\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {}",
							"    pm.expect(jsonData).to.not.have.property(\"token\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"user{{$timestamp}}\",\r\n    password: \"1234xxC4ABcsg!!_\"\r\n//Missing \"\" and }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - missing username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test: Status code should be 400 for missing username",
							"pm.test(\"Status code is 400 for missing username\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Test: Response body should contain an error property",
							"pm.test(\"Response body contains error property\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response is not valid JSON\");",
							"    }",
							"    pm.expect(jsonData).to.have.property(\"error\");",
							"});",
							"",
							"// Test: Error message must exactly match \"Username and password are required\"",
							"pm.test(\"Error message is exactly 'Username and password are required'\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response is not valid JSON\");",
							"    }",
							"    pm.expect(jsonData.error).to.eql(\"Username and password are required\");",
							"});",
							"",
							"// Test: No token should be present in response body",
							"pm.test(\"No token present in response body\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {}",
							"    pm.expect(jsonData).to.not.have.property(\"token\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"\",\r\n    \"password\": \"1234xxC4ABcsg!!_\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - missing password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test: Status code should be 400 for missing password",
							"pm.test(\"Status code is 400 for missing password\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Test: Response body should contain an error property",
							"pm.test(\"Response body contains error property\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response is not valid JSON\");",
							"    }",
							"    pm.expect(jsonData).to.have.property(\"error\");",
							"});",
							"",
							"// Test: Error message must exactly match \"Username and password are required\"",
							"pm.test(\"Error message is exactly 'Username and password are required'\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response is not valid JSON\");",
							"    }",
							"    pm.expect(jsonData.error).to.eql(\"Username and password are required\");",
							"});",
							"",
							"// Test: No token should be present in response body",
							"pm.test(\"No token present in response body\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {}",
							"    pm.expect(jsonData).to.not.have.property(\"token\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"user{{$timestamp}}\",\r\n    \"password\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - missing credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test: Status code should be 400 for missing credentials",
							"pm.test(\"Status code is 400 for missing credentials\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Test: Response body should contain an error property",
							"pm.test(\"Response body contains error property\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response is not valid JSON\");",
							"    }",
							"    pm.expect(jsonData).to.have.property(\"error\");",
							"});",
							"",
							"// Test: Error message must exactly match \"Username and password are required\"",
							"pm.test(\"Error message is exactly 'Username and password are required'\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response is not valid JSON\");",
							"    }",
							"    pm.expect(jsonData.error).to.eql(\"Username and password are required\");",
							"});",
							"",
							"// Test: No token should be present in response body",
							"pm.test(\"No token present in response body\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {}",
							"    pm.expect(jsonData).to.not.have.property(\"token\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"\",\r\n    \"password\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - too short username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test: Status code should be 400 for too short username",
							"pm.test(\"Status code is 400 for too short username\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Test: Response body should contain an error property",
							"pm.test(\"Response body contains error property\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response is not valid JSON\");",
							"    }",
							"    pm.expect(jsonData).to.have.property(\"error\");",
							"});",
							"",
							"// Test: Error message must exactly match \"Username must be between 3 and 50 characters\"",
							"pm.test(\"Error message is exactly 'Username must be between 3 and 50 characters'\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response is not valid JSON\");",
							"    }",
							"    pm.expect(jsonData.error).to.eql(\"Username must be between 3 and 50 characters\");",
							"});",
							"",
							"// Test: No token should be present in response body",
							"pm.test(\"No token present in response body\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {}",
							"    pm.expect(jsonData).to.not.have.property(\"token\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"A\",\r\n    \"password\": \"password123!!_\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - too long username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test: Status code should be 400 for too long username",
							"pm.test(\"Status code is 400 for too long username\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Test: Response body should contain an error property",
							"pm.test(\"Response body contains error property\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response is not valid JSON\");",
							"    }",
							"    pm.expect(jsonData).to.have.property(\"error\");",
							"});",
							"",
							"// Test: Error message must exactly match \"Username must be between 3 and 50 characters\"",
							"pm.test(\"Error message is exactly 'Username must be between 3 and 50 characters'\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response is not valid JSON\");",
							"    }",
							"    pm.expect(jsonData.error).to.eql(\"Username must be between 3 and 50 characters\");",
							"});",
							"",
							"// Test: No token should be present in response body",
							"pm.test(\"No token present in response body\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {}",
							"    pm.expect(jsonData).to.not.have.property(\"token\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"AnnaOttoMaxAnnaOttoMaxAnnaOttoMaxAnnaOttoMaxAnnaOttoMaxAnnaOttoMaxAnnaOttoMaxAnnaOttoMax\",\r\n    \"password\": \"password123Test!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - too short password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test: Status code should be 400 for too short password",
							"pm.test(\"Status code is 400 for too short password\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Test: Response body should contain an error property",
							"pm.test(\"Response body contains error property\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response is not valid JSON\");",
							"    }",
							"    pm.expect(jsonData).to.have.property(\"error\");",
							"});",
							"",
							"// Test: Error message must exactly match \"Password must be at least 6 characters\"",
							"pm.test(\"Error message is exactly 'Password must be at least 6 characters'\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response is not valid JSON\");",
							"    }",
							"    pm.expect(jsonData.error).to.eql(\"Password must be at least 6 characters\");",
							"});",
							"",
							"// Test: No token should be present in response body",
							"pm.test(\"No token present in response body\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {}",
							"    pm.expect(jsonData).to.not.have.property(\"token\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"Anna\",\r\n    \"password\": \"x123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - Invalid JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test: Status code should be 400 or 422 for invalid JSON (adjust if your API uses a different code)",
							"pm.test(\"Status code is 400 or 422 for invalid JSON\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400, 422, 500]); // 500 included if backend returns it for parse errors",
							"});",
							"",
							"// Test: Response body should contain an error property",
							"pm.test(\"Response body contains error property\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response is not valid JSON\");",
							"    }",
							"    pm.expect(jsonData).to.have.property(\"error\");",
							"});",
							"",
							"// Test: Error message must exactly match \"Invalid JSON format\"",
							"pm.test(\"Error message is exactly 'Invalid JSON format'\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response is not valid JSON\");",
							"    }",
							"    pm.expect(jsonData.error).to.eql(\"Invalid JSON format\");",
							"});",
							"",
							"// Test: Error message should mention invalid JSON or parse error",
							"pm.test(\"Error message indicates invalid JSON or parse error\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response is not valid JSON\");",
							"    }",
							"    pm.expect(jsonData.error.toLowerCase()).to.satisfy(function(msg) {",
							"        return msg.includes(\"json\") || msg.includes(\"parse\") || msg.includes(\"syntax\") || msg.includes(\"invalid\");",
							"    });",
							"});",
							"",
							"// Test: No token should be present in response body",
							"pm.test(\"No token present in response body\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {}",
							"    pm.expect(jsonData).to.not.have.property(\"token\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"Max\",\r\n    password: \"TestTest123!!_\"\r\n//Missing \"\" and }\r\n"
				},
				"url": {
					"raw": "http://localhost:8000/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - Duplicate User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test: Status code should be 400 for duplicate user",
							"pm.test(\"Status code is 400 for duplicate user\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Test: Response body should contain an error property",
							"pm.test(\"Response body contains error property\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response is not valid JSON\");",
							"    }",
							"    pm.expect(jsonData).to.have.property(\"error\");",
							"});",
							"",
							"// Test: Error message must exactly match \"Username already exists\"",
							"pm.test(\"Error message is exactly 'Username already exists'\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response is not valid JSON\");",
							"    }",
							"    pm.expect(jsonData.error).to.eql(\"Username already exists\");",
							"});",
							"",
							"// Test: No token should be present in response body",
							"pm.test(\"No token present in response body\", function () {",
							"    let jsonData = {};",
							"    try {",
							"        jsonData = pm.response.json();",
							"    } catch (e) {}",
							"    pm.expect(jsonData).to.not.have.property(\"token\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"Max\",\r\n    \"password\": \"1234ABcsg!!_\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"register"
					]
				}
			},
			"response": []
		}
	]
}